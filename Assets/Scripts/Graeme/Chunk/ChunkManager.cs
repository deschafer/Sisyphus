using UnityEngine;

public class ChunkManager : MonoBehaviour {

	private GameObject player;

	private BiomeBase currentBiome;
	private BiomeBase grass, snow, desert, hell;

	private float seed;
	private int position;
	private int lastPosition;

	void Start() {
		grass = new BiomeGrass();
		snow = new BiomeSnow();
		desert = new BiomeDesert();
		hell = new BiomeHell();
		player = GameObject.FindGameObjectWithTag("Player");
		seed = Random.Range(0f, 1f);
		position = lastPosition = 0;
	}

	void Update() {
		position = (int)Mathf.Round(player.transform.position.x / 32f);
		if(position % 10 == 0) {
			switch(Random.Range(0, 4)) {//should be based on noise
				case 0:
					currentBiome = grass;
					break;
				case 1:
					currentBiome = desert;
					break;
				case 2:
					currentBiome = hell;
					break;
				case 3:
					currentBiome = snow;
					break;
			}
		}
		//change this to render chunks (not every update, only if player pos requires update
		if (position > lastPosition - 1) {
			lastPosition = position;
			RenderChunk(GenerateChunk(position, 0.05f), position);
		}
	}

	/*
		GenerateChunk()
		Parameters: Initial chance for a cell to be occupied, number of times to smooth, number of neighbors required for a birth or death.
		Returns: Newly created chunk containing the cells set as generated by cellular automata.
		Purpose: Create, initialize, and return the chunk so it can be rendered and populated later on.
	*/
	public Chunk GenerateChunk(int position, float frequency) {
		int[,] cells = new int[Chunk.CHUNK_SIZE, Chunk.CHUNK_SIZE];

		InitializeCells(cells, position, frequency);

		return new Chunk(cells, currentBiome);
	}

	/*
		InitializeCells
		Purpose: Sets all cells in map to an initial value of either 0 or 1 based on Perlin noise.
		Parameters: The 2D array of cells to initialize.
	*/
	private void InitializeCells(int[,] grid, int position, float frequency) {
		for (int x = 0; x < Chunk.CHUNK_SIZE; x++) {
			int height = (int)Mathf.Clamp(Mathf.PerlinNoise(frequency * (position * Chunk.CHUNK_SIZE + x), seed) * (float)Chunk.CHUNK_SIZE, 1f, (float)(Chunk.CHUNK_SIZE - 1));
			int y;
			for (y = 0; y < height; y++)
				grid[x, y] = 0;
			for (; y < Chunk.CHUNK_SIZE; y++)
				grid[x, y] = 1;
		}
	}

	public void RenderChunk(Chunk c, int position) {
		GameObject top = c.getBiome().top;
		GameObject fill = c.getBiome().fill;
		for (int y = 0; y < Chunk.CHUNK_SIZE; y++) {
			for (int x = position * Chunk.CHUNK_SIZE; x < position * Chunk.CHUNK_SIZE + Chunk.CHUNK_SIZE; x++) {
				if (c.grid[x % Chunk.CHUNK_SIZE, y] == 1) {
					GameObject tile;
					if(c.grid[x % Chunk.CHUNK_SIZE, y - 1] == 0)
						tile = (GameObject)Instantiate(top, this.transform);
					else
						tile = (GameObject)Instantiate(fill, this.transform);
					tile.transform.position = new Vector2(x, -y);
				}
			}
		}
	}

	public float getSeed() {
		return seed;
	}

}
